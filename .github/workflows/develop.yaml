name: Develop
on:
  push:
    branches:
      - "develop"
      - "feature/*"
      - "release/*"
      - "hotfix/*"

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout repository
        id: checkout
        uses: actions/checkout@v3

      - name: Install dependencies
        id: install
        run: yarn install

      - name: Lint
        id: lint
        run: yarn lint

  create-prerelease:
    name: Create pre-release
    needs: test
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout repository
        id: checkout
        uses: actions/checkout@v3

      - name: Get latest version
        id: get-latest-version
        uses: actions-ecosystem/action-get-latest-tag@v1
        with:
          semver_only: true
          with_initial_version: true

      - name: Create version tag
        id: create-version-tag
        run: |
          echo 'version=${{ steps.get-latest-version.outputs.tag }}_snapshot_${{ github.run_number }}' >> $GITHUB_OUTPUT

      - name: Set snapshot tag
        id: set-snapshot-tag
        uses: actions/github-script@v6
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/${{ steps.create-version-tag.outputs.version }}',
              sha: context.sha
            })

      - name: "Create pre-release"
        uses: "actions/github-script@v6"
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"
          script: |
            try {
              const response = await github.rest.repos.createRelease({
                draft: false,
                generate_release_notes: false,
                name: ${{ steps.get-version.outputs.version }},
                files: ${{ steps.get-version.outputs.version }}.zip
                owner: context.repo.owner,
                prerelease: true,
                repo: context.repo.repo,
                tag_name: ${{ steps.get-version.outputs.version }},
              });

              core.exportVariable('RELEASE_ID', response.data.id);
              core.exportVariable('RELEASE_UPLOAD_URL', response.data.upload_url);
            } catch (error) {
              core.setFailed(error.message);
            }
